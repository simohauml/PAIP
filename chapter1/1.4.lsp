(defun count-anywhere (exp exps)
  (cond ((null exp) 0)
        ((null exps) 0)
        ((atom exp) (cond ((eql exp exps) 1)
                          ((atom exps) 0)
                          (t (+ (count-anywhere exp (first exps))
                                (count-anywhere exp (rest exps))))))
        ((atom exps) 0)
        (t (cond ((equal exp exps) 1)
                 (t (+ (count-anywhere exp (first exps))
                       (count-anywhere exp (rest exps))))))))

;; (defun eq-exp (exp1 exp2)
;;   (cond ((and (null exp1) (null exp2)) t)
;;         ((or (null exp1) (null exp2)) nil)
;;         (t (and (eq (first exp1) (first exp2))
;;                 (eq-exp (rest exp1) (rest exp2))))))

(defun count-anywhered (item tree)
  "Count the times item appears anywhere within tree."
  (cond ((eql item tree) 1)
        ((atom tree) 0)
        (t (+ (count-anywhered item (first tree))
              (count-anywhered item (rest tree))))))
